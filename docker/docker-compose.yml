# Production Full-Stack Deployment
# Use this for complete Ghost Drive deployment with all services

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ghost-drive-postgres
    profiles:
      - database
      - all
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-ghost_drive}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ghost_drive}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ghost-drive-network

  # MinIO Object Storage
  minio:
    image: quay.io/minio/minio:latest
    container_name: ghost-drive-minio
    profiles:
      - storage
      - all
    restart: unless-stopped
    env_file:
      - ../.env
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ghost-drive-network

  # Backend API
  backend:
    container_name: ghost-drive-backend
    profiles:
      - backend
      - all
    restart: unless-stopped
    env_file:
      - ../.env
    build:
      context: ..
      dockerfile: Docker/Dockerfile
      target: production
    ports:
      - "${BACKEND_PORT:-3000}:8080"
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT_INTERNAL:-5432}/${POSTGRES_DB:-ghost_drive}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-ghost_drive}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT_INTERNAL:-5432}
      
      # MinIO Configuration
      MINIO_ENDPOINT: ${MINIO_ENDPOINT:-minio}
      MINIO_PORT: ${MINIO_PORT_INTERNAL:-9000}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-ghost-drive}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-changeme_super_secret_jwt_key_minimum_32_characters}
      
      # Application Configuration
      PORT: 8080
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
        required: false
      minio:
        condition: service_healthy
        required: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ghost-drive-network

  # Frontend Application
  frontend:
    image: ${FRONTEND_IMAGE:-darkwarrion/ghost-drive-ui:latest}
    container_name: ghost-drive-frontend
    profiles:
      - frontend
      - all
    restart: unless-stopped
    env_file:
      - ../.env
    ports:
      - "${FRONTEND_PORT:-80}:80"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
    depends_on:
      backend:
        condition: service_healthy
        required: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - ghost-drive-network

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  ghost-drive-network:
    driver: bridge

